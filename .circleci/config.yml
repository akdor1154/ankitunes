# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

executors:
  python_docker:
    parameters:
      python_docker_tag:
        type: string
    docker:
      #- image: cimg/python:<< parameters.python_docker_tag >>
      - image: akdor1154/cimg-ankitunes:<< parameters.python_docker_tag >>
  publisher:
    docker:
      - image: akdor1154/cimg-ankitunes:3.8

jobs:
  lint:
    parameters:
      python_docker_tag:
        type: string
    executor:
      name: python_docker
      python_docker_tag: << parameters.python_docker_tag >>

    steps:
      - checkout

      - restore_cache:
          keys:
            - >
              v2
              python_artifacts
              << parameters.python_docker_tag >>
              {{ checksum "pyproject.toml" }}
              {{ checksum "poetry.lock" }}

      - run:
          name: Install test dependencies
          command: make deps

      - save_cache:
          key: >
              v2
              python_artifacts
              << parameters.python_docker_tag >>
              {{ checksum "pyproject.toml" }}
              {{ checksum "poetry.lock" }}
          paths:
            - .venv
            - /home/circleci/.cache/pypoetry

      - run:
          name: Formatting check
          command: make lint-format

      - restore_cache:
          keys:
            - >
              v1
              mypy_cache
              << parameters.python_docker_tag >>
              {{ checksum "pyproject.toml" }}
              {{ checksum "poetry.lock" }}

      - run:
          name: mypy
          command: make lint-mypy

      - save_cache:
          key: >
              v1
              mypy_cache
              << parameters.python_docker_tag >>
              {{ checksum "pyproject.toml" }}
              {{ checksum "poetry.lock" }}
          paths:
            - .mypy_cache

  test:
    parameters:
      python_docker_tag:
        type: string
      anki_version:
        type: string
    executor:
      name: python_docker
      python_docker_tag: << parameters.python_docker_tag >>
    steps:
      - checkout

      - restore_cache:
          keys:
            - >
              v3
              python_artifacts_with_anki_version
              << parameters.python_docker_tag >>
              << parameters.anki_version >>
              {{ checksum "pyproject.toml" }}
              {{ checksum "poetry.lock" }}

      - run:
          name: Install test dependencies
          command: |
            make deps

            if [ "<< parameters.anki_version >>" = "latest" ]; then
              poetry run pip install --upgrade anki aqt
            else
              poetry run pip install anki==<<parameters.anki_version>> aqt==<<parameters.anki_version>>
            fi

      - save_cache:
          key: >
              v3
              python_artifacts_with_anki_version
              << parameters.python_docker_tag >>
              << parameters.anki_version >>
              {{ checksum "pyproject.toml" }}
              {{ checksum "poetry.lock" }}
          paths:
            - .venv
            - /home/circleci/.cache/pypoetry
            - /home/circleci/.cache/pip

      - run:
          name: Make
          command: make

      - run:
          name: unit tests
          command: poetry run pytest -sv tests/headless --ankiaddon dist/ankitunes.ankiaddon

      - run:
          name: ui tests
          command: xvfb-run poetry run pytest -sv tests/ui --ankiaddon dist/ankitunes.ankiaddon

      - store_artifacts:
          path: dist/ankitunes.ankiaddon
          destination: ''

      - store_artifacts:
          path: screenshots/
          destination: screenshots/

      - run:
          name: fix workspace stuff
          command: |
            WORKSPACE=workspace/<< parameters.anki_version >>/<< parameters.python_docker_tag >>
            mkdir -p "$WORKSPACE"
            cp dist/ankitunes.ankiaddon "$WORKSPACE"/
            ANKI_VERSION=$(poetry run python \<<EOF
            import anki
            print(anki.version)
            EOF
            )
            echo "$ANKI_VERSION" > "$WORKSPACE"/anki_version

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: workspace
          # Must be relative path from root
          paths:
            - << parameters.anki_version >>/<< parameters.python_docker_tag >>/ankitunes.ankiaddon
            - << parameters.anki_version >>/<< parameters.python_docker_tag >>/anki_version

  register:
    executor:
      name: publisher
    steps:

      - checkout

      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: workspace

      - run:
          name: Install publish deps
          command: poetry install -E publish --no-dev

      - run:
          name: register
          command: |
            WORKSPACE=workspace/latest/3.8
            ANKI_VERSION=$(cat $WORKSPACE/anki_version)
            poetry run .circleci/publish \
              --addon-id 1456964007 \
              --title 'AnkiTunes' \
              --addon-zip $WORKSPACE/ankitunes.ankiaddon \
              --min-version 2.1.45 \
              --max-version "$ANKI_VERSION"

workflows:
  testAndRegister:
    jobs:
      - lint:
          matrix:
            parameters:
              python_docker_tag: ["3.8", "3.9"]

      - test:
          matrix:
            parameters:
              #python_docker_tag: ["3.8", "3.9"]
              python_docker_tag: ["3.8", "3.9"]
              anki_version: ["2.1.45", "latest"]
            exclude:
              - python_docker_tag: "3.8"
                anki_version: "2.1.45"
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+.*$/
      - register:
          requires:
            - lint
            - test
          context: AnkiTunes
          filters:
            branches:
              only: master

